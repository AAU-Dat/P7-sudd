// ----------------------------------------------------------------------------
// This file has been created by Raphael Reynouard and upload to
// https://github.com/Rapfff/MM-PCTMC-benchmark-models
// This is a modified version of the philosophers model from the Quantitative
// Verification Benchmark Set (https://qcomp.org/benchmarks/).
// This model was first presented DOI 10.1007/BF00289519.
// ----------------------------------------------------------------------------
// The parameters to estimate are:
// 	alpha	 	(expected value: 0.3)
//	betax	 	(expected value: 0.1)
//	gammax	 	(expected value: 1.0)
//	zetax	 	(expected value: 0.2)
//
// The observable parameters/variables are:
//	"hungry1" = (p1>0)&(p1<8);
//	"hungry2" = (p2>0)&(p2<8);
//	"hungry3" = (p3>0)&(p3<8);
//	"eat1"    = (p1>=8)&(p1<=9);
//	"eat2"    = (p2>=8)&(p2<=9);
//	"eat3"    = (p3>=8)&(p3<=9);
// ----------------------------------------------------------------------------

ctmc

const double alpha; // = 0.3;
const double betax; // = 0.1;
const double gammax; // = 1.0;
const double zetax; // = 0.2;


formula lfree = (p2>=0&p2<=4)|p2=6|p2=10;
formula rfree = (p3>=0&p3<=3)|p3=5|p3=7|p3=11;

module phil1

    p1: [0..12] init 12;
    [] p1=12-> alpha : (p1'=0) + betax : (p1'=1);
    [] p1=0 -> alpha : (p1'=0) + betax : (p1'=1); // stay thinking or trying
    [] p1=1 -> 0.5 : (p1'=2) + 0.5 : (p1'=3); // draw randomly
    [] p1=2 &  lfree  -> gammax : (p1'=4); // pick up left
    [] p1=2 &  !lfree -> gammax : (p1'=2); // left not free
    [] p1=3 &  rfree  -> gammax : (p1'=5); // pick up right
    [] p1=3 &  !rfree -> gammax : (p1'=3); // right not free
    [] p1=4 &  rfree  -> gammax : (p1'=8); // pick up right (got left)
    [] p1=4 & !rfree  -> gammax : (p1'=6); // right not free (got left)
    [] p1=5 &  lfree  -> gammax : (p1'=8); // pick up left (got right)
    [] p1=5 & !lfree  -> gammax : (p1'=7); // left not free (got right)
    [] p1=6  -> gammax : (p1'=1); // put down left
    [] p1=7  -> gammax : (p1'=1); // put down right
    [] p1=8  -> gammax : (p1'=9); // move to eating (got forks)
    [] p1=9  -> zetax   : (p1'=10); // finished eating and put down left
    [] p1=9  -> zetax   : (p1'=11); // finished eating and put down right
    [] p1=10 -> gammax : (p1'=0); // put down right and return to think
    [] p1=11 -> gammax : (p1'=0); // put down left and return to think
endmodule

// construct further modules through renaming
module phil2 = phil1 [ p1=p2, p2=p3, p3=p1 ] endmodule
module phil3 = phil1 [ p1=p3, p2=p1, p3=p2 ] endmodule

// labels
label "hungry1" = (p1>0)&(p1<8);
label "hungry2" = (p2>0)&(p2<8);
label "hungry3" = (p3>0)&(p3<8);
label "eat1"    = (p1>=8)&(p1<=9);
label "eat2"    = (p2>=8)&(p2<=9);
label "eat3"    = (p3>=8)&(p3<=9);