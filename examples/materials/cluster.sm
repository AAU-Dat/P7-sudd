// ----------------------------------------------------------------------------
// This file has been created by Raphael Reynouard and upload to
// https://github.com/Rapfff/MM-PCTMC-benchmark-models
// This is a modified version of the cluster model from the Quantitative
// Verification Benchmark Set (https://qcomp.org/benchmarks/).
// This model was first presented DOI 10.1109/RELDI.2000.885410.
// ----------------------------------------------------------------------------
// The parameters to estimate are:
// 	ws_fail 	(expected value: 1/500)
//	switch_fail 	(expected value: 1/4000)
//	line_fail 	(expected value: 1/5000)
//
// The observable parameters/variables are:
//	left
//	right
//	toleft
//	toright
//	line
//	r
// ----------------------------------------------------------------------------



ctmc

const int N = 2; // Number of workstations in each cluster
const int left_mx = N; // Number of work stations in left cluster
const int right_mx = N; // Number of work stations in right cluster

// Minimum QoS requires 3/4 connected workstations operational
const int k = floor(0.75*N);
formula minimum = (left_n>=k & toleft_n) |
                  (right_n>=k & toright_n) |
                  ((left_n+right_n)>=k & toleft_n & line_n & toright_n);

// Failure rates
const double ws_fail; // = 1/500; // to estimate
const double switch_fail;  // = 1/4000; // to estimate
const double line_fail; // = 1/5000; // to estimate

// Left cluster
module Left

	left_n : [0..left_mx] init left_mx; // Number of workstations operational
	left : bool; // Being repaired?

	[startLeft] !left & (left_n<left_mx) -> 1 : (left'=true);
	[repairLeft] left & (left_n<left_mx) -> 1 : (left'=false) & (left_n'=left_n+1);
	[] (left_n>0) -> ws_fail*left_n : (left_n'=left_n-1);

endmodule

// Right cluster
module Right = Left[left_n=right_n,
                    left=right,
                    left_mx=right_mx,
                    startLeft=startRight,
                    repairLeft=repairRight ]
endmodule

// Repair unit
module Repairman

	r : bool; // Repairing?

	[startLeft]    !r -> 10 : (r'=true); // Inspect Left
	[startRight]   !r -> 10 : (r'=true); // Inspect Right
	[startToLeft]  !r -> 10 : (r'=true); // Inspect ToLeft
	[startToRight] !r -> 10 : (r'=true); // Inspect ToRight
	[startLine]    !r -> 10 : (r'=true); // Inspect Line

	[repairLeft]    r -> 2     : (r'=false); // Repair Left
	[repairRight]   r -> 2     : (r'=false); // Repair Right
	[repairToLeft]  r -> 0.25  : (r'=false); // Repair ToLeft
	[repairToRight] r -> 0.25  : (r'=false); // Repair ToRight
	[repairLine]    r -> 0.125 : (r'=false); // Repair Line

endmodule

// Line/backbone
module Line

	line :   bool; // Being repaired?
	line_n : bool init true; // Working?

	[startLine] !line & !line_n -> 1 : (line'=true);
	[repairLine] line & !line_n -> 1 : (line'=false) & (line_n'=true);
	[] line_n -> line_fail : (line_n'=false);

endmodule

// Left switch
module ToLeft = Line[line=toleft,
                     line_n=toleft_n,
                     line_fail=switch_fail,
                     startLine=startToLeft,
                     repairLine=repairToLeft ]
endmodule

// Right switch
module ToRight = Line[line=toright,
                      line_n=toright_n,
                      line_fail=switch_fail,
                      startLine=startToRight,
                      repairLine=repairToRight ]
endmodule

label "repairleft"  = left = true;
label "repairright" = right= true;
label "repairleftswitch"   = toleft = true;
label "repairrightswitch"  = toright= true;
label "repairline" = line = true;
label "repairnothing" = r = false;
