Multiple Gaussian Observations Hidden Markov Model (MGOHMM)
===========================================================
A MGOHMM is similar to a GOHMM, but this time each state will generated several real number according
to different gaussian distributions. Instead of having a unique gaussian ditribution, each state has
several pairs of parameters *mu* and *sigma*.

Example
-------

Creation
^^^^^^^^
.. code-block:: python

	>>> import jajapy as ja
	>>> from numpy import array
	>>> nb_states = 5
	>>> s0 = ja.MGOHMM_state([(0,0.9),(1,0.1)],[[3.0,5.0],[2.0,4.0]],nb_states)
	>>> s1 = ja.MGOHMM_state([(0,0.05),(1,0.9),(2,0.04),(4,0.01)],[[0.5,1.5],[2.5,1.5]],nb_states)
	>>> s2 = ja.MGOHMM_state([(1,0.05),(2,0.8),(3,0.14),(4,0.01)],[[0.2,0.7],[1.0,1.0]],nb_states)
	>>> s3 = ja.MGOHMM_state([(2,0.05),(3,0.95)],[[0.0,0.3],[1.5,5.0]],nb_states)
	>>> s4 = ja.MGOHMM_state([(1,0.1),(4,0.9)],[[2.0,4.0],[0.5,0.5]],nb_states)
	>>> matrix = array([s0[0],s1[0],s2[0],s3[0],s4[0]])
	>>> output = array([s0[1],s1[1],s2[1],s3[1],s4[1]])
	>>> model = ja.MGOHMM(matrix,output,[0.1,0.7,0.0,0.0,0.2],name="My MGOHMM")
	>>> #print(model)

We can also generate a random MGOHMM

.. code-block:: python

	>>> random_model = ja.GOHMM_random(nb_states=5,
					nb_distributions=2,
					random_initial_state=True,
					min_mu = 0.0,
					max_mu = 5.0,
					min_sigma = 0.5,
					max_sigma = 5.0)

Exploration
^^^^^^^^^^^

.. code-block:: python

	>>> model.a(0,0) 		 
	0.9
	>>> model.mu(1)
	[0.5,2.5]
	>>> model.mu_n(1,0)
	0.5
	>>> model.mu_n(1,1)
	2.5
	>>> model.b_n(0,0,4.0)
	0.07820853879509118
	>>> model.b(0,[4.0,2.0])
	0.019676393869096122
	>>> model.tau(0,1,[4.0,2.0])
	0.001967639386909612
	
Running
^^^^^^^

.. code-block:: python

	>>> model.run(5) # returns a list of 5 observations
	[[-0.9164, 0.9293], [2.2899, 3.5504], [2.3267, 2.1707],
	 [1.3331, 4.0007], [-0.4665, 2.7824]]
	>>> s = model.generateSet(10,5) # returns a Set containing 10 traces of size 5
	>>> s.sequences
	[[[9.3405, 0.8683], [1.4833, 2.2637], [2.3062, 3.2038], [-0.2874, 2.0836], [2.1239, 0.4151]],
	 [[0.5575, 1.7076], [10.2139, 1.0871], [6.6165, 0.1824], [-0.1457, 3.1472], [5.5954, 0.4131]],
	 [[0.6512, 3.4678], [0.0556, 1.5676], [3.7192, 1.7499], [-1.8864, 4.0782], [0.7844, 0.2465]],
	 [[-0.6203, 3.9239], [3.3488, 15.2293], [3.6752, 0.8598], [-0.8199, 1.6017], [1.721, 1.3233]],
	 [[-0.0699, 4.4774], [-3.3004, 1.1309], [0.215, 0.8019], [-0.0863, 2.1807], [1.9184, 3.3604]],
	 [[0.6335, 3.9419], [0.9906, -0.6981], [-2.0558, 1.5194], [-1.4004, -0.6117], [-0.6355, 2.439]],
	 [[1.1319, 0.5913], [-0.0456, 2.3107], [-0.8434, 1.1611], [3.0083, 4.7228], [0.0126, 1.6285]],
	 [[1.0949, 1.5771], [-0.0283, 3.2365], [-0.6571, 1.9606], [0.7886, -0.7945], [1.0251, 5.2814]],
	 [[-1.642, 3.9848], [3.7921, -9.4217], [4.506, 0.3843], [-0.4079, 3.752], [1.4086, 4.3769]],
	 [[1.9678, 0.6006], [7.62, 0.355], [-0.7602, 0.6858], [4.4317, 0.6285], [6.5707, -0.3644]]]

	>>> s.times
	[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
	>>> s.type #will be 3 since s has been generated by a MGOHMM
	3

Analysis
^^^^^^^^

.. code-block:: python

	>>> model.logLikelihood(s) # loglikelihood of this set of traces under this model
	-22.475858733739912

Saving/Loading
^^^^^^^^^^^^^^

.. code-block:: python

	>>> model.save("my_gohmm.txt")
	>>> another_model = ja.loadGOHMM("my_gohmm.txt")



Model
-----

.. autoclass:: jajapy.MGOHMM
   :members:
   :inherited-members:

Other Functions
---------------

.. autofunction:: jajapy.MGOHMM_state

.. autofunction:: jajapy.loadMGOHMM

.. autofunction:: jajapy.MGOHMM_random
